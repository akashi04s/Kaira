!function(e){"use strict";var i=function(){new Swiper(".main-swiper",{slidesPerView:3,spaceBetween:80,speed:700,loop:!0,navigation:{nextEl:".icon-arrow-right",prevEl:".icon-arrow-left"},breakpoints:{300:{slidesPerView:1,spaceBetween:20},768:{slidesPerView:2,spaceBetween:20},1200:{slidesPerView:3,spaceBetween:80}}}),new Swiper(".slideshow",{slidesPerView:1,spaceBetween:0,speed:1e3,loop:!0,navigation:{nextEl:".icon-arrow-right",prevEl:".icon-arrow-left"}}),new Swiper(".two-column-swiper .swiper",{slidesPerView:1,loop:!0,speed:900,navigation:{nextEl:".two-column-swiper .icon-arrow-right",prevEl:".two-column-swiper .icon-arrow-left"}}),new Swiper(".overlay-swiper",{slidesPerView:"auto",loop:!0,navigation:{nextEl:".icon-arrow-right",prevEl:".icon-arrow-left"}}),e(".product-carousel").each(function(){var i=e(this).attr("id");new Swiper("#"+i+" .swiper",{slidesPerView:4,spaceBetween:20,navigation:{nextEl:"#"+i+" .icon-arrow-right",prevEl:"#"+i+" .icon-arrow-left"},breakpoints:{0:{slidesPerView:2,spaceBetween:20,pagination:{el:".swiper-pagination",clickable:!0}},999:{slidesPerView:3,spaceBetween:10},1366:{slidesPerView:4,spaceBetween:40}}})}),new Swiper(".testimonial-swiper",{effect:"coverflow",grabCursor:!0,centeredSlides:!0,loop:!0,slidesPerView:"auto",coverflowEffect:{fade:!0},pagination:{el:".testimonial-swiper-pagination",clickable:!0}}),new Swiper(".review-swiper",{slidesPerView:1,spaceBetween:20,loop:!0,navigation:{nextEl:".icon-arrow-right",prevEl:".icon-arrow-left"},pagination:{el:".swiper-pagination",clickable:!0}});var i=new Swiper(".product-thumbnail-slider",{slidesPerView:3,spaceBetween:20,direction:"vertical",breakpoints:{0:{direction:"horizontal"},992:{direction:"vertical"}}});new Swiper(".product-large-slider",{slidesPerView:1,spaceBetween:0,effect:"fade",thumbs:{swiper:i},pagination:{el:".swiper-pagination",clickable:!0}})},t=function(){e(".product-qty").each(function(){var i=e(this);i.find(".quantity-right-plus").click(function(e){e.preventDefault();var t=parseInt(i.find("#quantity").val());i.find("#quantity").val(t+1)}),i.find(".quantity-left-minus").click(function(e){e.preventDefault();var t=parseInt(i.find("#quantity").val());t>0&&i.find("#quantity").val(t-1)})})},n=function(){jarallax(document.querySelectorAll(".jarallax")),jarallax(document.querySelectorAll(".jarallax-keep-img"),{keepImg:!0})},o=function(){e(".txt-fx").each(function(){var i="",t=0,n=this.textContent.split(/\s/);e.each(n,function(e,n){i+='<span class="word">';for(var o=0,a=n.length;o<a;o++)i+="<span class='letter' style='transition-delay:"+(300+10*t)+"ms;'>"+n[o]+"</span>",t++;i+="</span>",i+="<span class='letter' style='transition-delay:300ms;'>&nbsp;</span>",t++}),this.innerHTML=i})},a=function(){e(window).scrollTop()>=200?e(".navbar.fixed-top").addClass("bg-black"):e(".navbar.fixed-top").removeClass("bg-black")},s=function(){e(".grid").each(function(){var i=e(".button-group"),t=i.find(".is-checked").attr("data-filter"),n=e(".grid").isotope({itemSelector:".product-item",layoutMode:"fitRows",filter:t});e(".button-group").on("click","a",function(i){i.preventDefault(),t=e(this).attr("data-filter"),n.isotope({filter:t})}),e(".button-group").each(function(t,n){i.on("click","a",function(){i.find(".is-checked").removeClass("is-checked"),e(this).addClass("is-checked")})})})},r=function(){e(".image-zoom").on("mouseover",function(){e(this).children(".photo").css({transform:"scale("+e(this).attr("data-scale")+")"})}).on("mouseout",function(){e(this).children(".photo").css({transform:"scale(1)"})}).on("mousemove",function(i){e(this).children(".photo").css({"transform-origin":(i.pageX-e(this).offset().left)/e(this).width()*100+"% "+(i.pageY-e(this).offset().top)/e(this).height()*100+"%"})}).each(function(){e(this).append('<div class="photo"></div>').children(".photo").css({"background-image":"url("+e(this).attr("data-image")+")"})})},c=function(){e(".navbar").on("click",".search-button",function(i){e(".search-popup").toggleClass("is-visible")}),e(".navbar").on("click",".btn-close-search",function(i){e(".search-popup").toggleClass("is-visible")}),e(".search-popup-trigger").on("click",function(i){i.preventDefault(),e(".search-popup").addClass("is-visible"),setTimeout(function(){e(".search-popup").find("#search-popup").focus()},350)}),e(".search-popup").on("click",function(i){(e(i.target).is(".search-popup-close")||e(i.target).is(".search-popup-close svg")||e(i.target).is(".search-popup-close path")||e(i.target).is(".search-popup"))&&(i.preventDefault(),e(this).removeClass("is-visible"))}),e(document).keyup(function(i){"27"===i.which&&e(".search-popup").removeClass("is-visible")})};e(window).scroll(function(){a()}),e(window).load(function(){e(".preloader").addClass("loaded"),e(".btn-nav").on("click tap",function(){e(".nav-content").toggleClass("showNav hideNav").removeClass("hidden"),e(this).toggleClass("animated")}),s()}),e(document).ready(function(){c(),n(),o(),t(),i(),r(),e(".youtube").colorbox({iframe:!0,innerWidth:960,innerHeight:585}),AOS.init({duration:1200,once:!0}),new hcSticky(".sticky-info",{stickTo:"section.single-product",innerTop:200,responsive:{980:{disable:!0}}})})}(jQuery);// Initialize cart when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize empty cart if it doesn't exist
  if (!localStorage.getItem('cart')) {
    localStorage.setItem('cart', JSON.stringify([]));
  }
  
  // Update cart count in header
  updateCartCount();
  
  // Load cart when sidebar is shown
  const cartOffcanvas = document.getElementById('offcanvasCart');
  if (cartOffcanvas) {
    cartOffcanvas.addEventListener('show.bs.offcanvas', function() {
      loadCartSidebar();
    });
  }
  
  // Add to cart functionality for product items
  document.querySelectorAll('[data-after="Add to cart"]').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const productItem = this.closest('.product-item');
      const product = {
        id: productItem.dataset.id || Math.random().toString(36).substr(2, 9),
        name: productItem.querySelector('.element-title a').textContent,
        price: parseFloat(this.querySelector('span').textContent.replace('Starting ₹', '').replace(',', '') || this.querySelector('span').textContent.replace('₹', '').replace(',', '')),
        image: productItem.querySelector('.product-image').src,
        quantity: 1
      };
      
      addToCart(product);
    });
  });
});

// Function to add item to cart
function addToCart(product) {
  const cart = JSON.parse(localStorage.getItem('cart'));
  const existingItem = cart.find(item => item.id === product.id);
  
  if (existingItem) {
    existingItem.quantity += 1;
  } else {
    cart.push(product);
  }
  
  localStorage.setItem('cart', JSON.stringify(cart));
  updateCartCount();
  showAddToCartNotification(product);
  
  // If cart sidebar is open, refresh it
  if (document.querySelector('.offcanvas.show#offcanvasCart')) {
    loadCartSidebar();
  }
}

// Function to load cart items into sidebar
function loadCartSidebar() {
  const cart = JSON.parse(localStorage.getItem('cart')) || [];
  const cartItemsList = document.getElementById('cart-items-list');
  const emptyMessage = document.getElementById('cart-empty-message');
  const cartContent = document.getElementById('cart-content');
  
  // Clear existing items
  cartItemsList.innerHTML = '';
  
  if (cart.length === 0) {
    emptyMessage.style.display = 'block';
    cartContent.style.display = 'none';
    return;
  }
  
  emptyMessage.style.display = 'none';
  cartContent.style.display = 'block';
  
  let subtotal = 0;
  
  // Add each item to the sidebar
  cart.forEach(item => {
    const itemTotal = item.price * item.quantity;
    subtotal += itemTotal;
    
    const li = document.createElement('li');
    li.className = 'list-group-item d-flex justify-content-between lh-sm';
    li.innerHTML = `
      <div class="d-flex">
        <div class="me-3" style="width: 60px;">
          <img src="${item.image}" alt="${item.name}" class="img-fluid">
        </div>
        <div>
          <h6 class="my-0">${item.name}</h6>
          <small class="text-body-secondary">₹${item.price.toLocaleString('en-IN')} × ${item.quantity}</small>
          <div class="quantity-selector mt-1 d-flex align-items-center">
            <button class="quantity-minus btn btn-sm p-0" data-id="${item.id}">
              <svg width="16" height="16" viewBox="0 0 24 24">
                <use xlink:href="#minus"></use>
              </svg>
            </button>
            <input type="number" value="${item.quantity}" min="1" 
                   class="quantity-input form-control form-control-sm text-center mx-1" 
                   style="width: 40px;" data-id="${item.id}">
            <button class="quantity-plus btn btn-sm p-0" data-id="${item.id}">
              <svg width="16" height="16" viewBox="0 0 24 24">
                <use xlink:href="#plus"></use>
              </svg>
            </button>
          </div>
        </div>
      </div>
      <div class="text-end">
        <span class="text-body">₹${itemTotal.toLocaleString('en-IN', {minimumFractionDigits: 2})}</span>
        <div class="mt-2">
          <a href="#" class="remove-item text-danger small" data-id="${item.id}">
            <svg width="14" height="14" viewBox="0 0 24 24">
              <use xlink:href="#trash"></use>
            </svg>
          </a>
        </div>
      </div>
    `;
    cartItemsList.appendChild(li);
  });
  
  // Calculate tax and total
  const tax = subtotal * 0.1; // 10% tax
  const total = subtotal + tax;
  
  // Update summary
  document.getElementById('cart-subtotal').textContent = `₹${subtotal.toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
  document.getElementById('cart-tax').textContent = `₹${tax.toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
  document.getElementById('cart-total').textContent = `₹${total.toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
  
  // Add event listeners to quantity controls
  addCartItemEventListeners();
}

// Function to add event listeners to cart item controls
function addCartItemEventListeners() {
  // Quantity plus buttons
  document.querySelectorAll('.quantity-plus').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.dataset.id;
      updateCartItemQuantity(itemId, 1);
    });
  });
  
  // Quantity minus buttons
  document.querySelectorAll('.quantity-minus').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.dataset.id;
      updateCartItemQuantity(itemId, -1);
    });
  });
  
  // Quantity input changes
  document.querySelectorAll('.quantity-input').forEach(input => {
    input.addEventListener('change', function() {
      const itemId = this.dataset.id;
      const newQuantity = parseInt(this.value);
      if (newQuantity > 0) {
        updateCartItemQuantity(itemId, 0, newQuantity);
      } else {
        this.value = 1;
      }
    });
  });
  
  // Remove item buttons
  document.querySelectorAll('.remove-item').forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const itemId = this.dataset.id;
      removeCartItem(itemId);
    });
  });
}

// Function to update item quantity in cart
function updateCartItemQuantity(itemId, change, newQuantity = null) {
  const cart = JSON.parse(localStorage.getItem('cart'));
  const itemIndex = cart.findIndex(item => item.id === itemId);
  
  if (itemIndex !== -1) {
    if (newQuantity !== null) {
      cart[itemIndex].quantity = newQuantity;
    } else {
      cart[itemIndex].quantity += change;
      
      // Ensure quantity doesn't go below 1
      if (cart[itemIndex].quantity < 1) {
        cart[itemIndex].quantity = 1;
      }
    }
    
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCount();
    loadCartSidebar();
  }
}

// Function to remove item from cart
function removeCartItem(itemId) {
  let cart = JSON.parse(localStorage.getItem('cart'));
  cart = cart.filter(item => item.id !== itemId);
  
  localStorage.setItem('cart', JSON.stringify(cart));
  updateCartCount();
  loadCartSidebar();
}

// Function to show add to cart notification
function showAddToCartNotification(product) {
  const notification = document.createElement('div');
  notification.className = 'cart-notification';
  notification.innerHTML = `
    <div class="cart-notification-content">
      <svg width="24" height="24" viewBox="0 0 24 24">
        <use xlink:href="#check"></use>
      </svg>
      <span>${product.name} added to cart</span>
    </div>
  `;
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.classList.add('show');
  }, 10);
  
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 3000);
}

// Function to update cart count in header
function updateCartCount() {
  const cart = JSON.parse(localStorage.getItem('cart')) || [];
  const count = cart.reduce((total, item) => total + item.quantity, 0);
  
  document.querySelectorAll('.cart-count-badge, .cart-count').forEach(el => {
    el.textContent = count;
  });
}